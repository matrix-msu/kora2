<?php

namespace KoraORM\Entities;

/**
 * A example of how to create custom KoraEntities.
 * 
 * The Photo class is an example of a custom KoraEntity using this library.
 * To create a custom KoraEntity named Foo, just create a new file in this
 * directory called Foo.php, and inside that file, declare a class called Foo
 * in the \KoraORM\Entities namespace which extends \KoraORM\KoraEntity.
 * 
 * @author Zachary Pepin <zachary.pepin@matrix.msu.edu>
 */
class Photo extends \KoraORM\KoraEntity
{
	/**
	 * Create any metadata associated with this KoraEntity.
	 * 
	 * This method must be defined and it must return an array in the proper
	 * format. The proper format is explained in-line below. The KoraORM API
	 * generates some reasonable default metadata so that you must only specify
	 * what is different from the default values.
	 * 
	 * For instance, a property is created for each control in the associated
	 * scheme in Kora. These properties will have the same names as the
	 * controls in Kora, and they will be mapped to an appropriate default
	 * \KoraORM\KoraControl object.
	 */
	public static function loadMetadata()
	{
		return array(
				// The project and scheme are used by the KoraManager to know
				//   to use this class to instantiate objects from the
				//   specified project and scheme.
				'project' => PROJECT_ID,
				'scheme' => SCHEME_ID,
				// Now we specify some customization of mappings from controls
				// to properties
				'controls' => array(
						'Title' => array(	// create a property called 'title'
								'koraName' => 'Title',	// map it to the Kora control 'Title'
								'type' => '\KoraORM\Controls\TextControl' )));	// use this custom KoraControl to instantiate the data
	}
	
	/**
	 * Print some HTML describing the book.
	 * 
	 * An example of a custom method.
	 */
	public function prettyPrint()
	{
?>
<div class="photo">
 <h4><?php echo htmlspecialchars($this->Title); ?></h4>
 <p><strong>Taken:</strong> <?php echo htmlspecialchars($this->Taken); ?></p>
 <p><img src="<?php echo htmlspecialchars($this->Photo->thumbUrl); ?>" /></p>
<?php foreach ($this->Categories as $category): ?>
 <p><strong>Category:</strong> <?php echo htmlspecialchars($category); ?></p>
<?php endforeach; ?>
</div>
<?php
	}
}
