<?php
/**
Copyright (2008) Matrix: Michigan State University

This file is part of KORA.

KORA is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

KORA is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>. */

// Initial Version: Brian Beck, 2008
// Refactor: Joe Deming, Anthony D'Onofrio 2013

require_once(__DIR__.'/../includes/includes.php');
Manager::AddJS('controls/textControl.js', Manager::JS_CLASS); 

/**
 * @class TextControl object
 *
 * This class respresents a TextControl in KORA
 */
class TextControl extends Control {
	protected $name = "Text Control";
	
	/**
	  * Standard constructor for a control. See Control::Construct for details.
	  *
	  * @return void
	  */
	public function TextControl($projectid='', $controlid='', $recordid='', $inPublicTable = false)
	{
		if (empty($projectid) || empty($controlid)) return;
		global $db;
		
		$this->Construct($projectid,$controlid,$recordid,$inPublicTable);
		
		// If data exists for this control, get it
		if (!empty($this->rid))
		{
			$this->LoadValue();
		}
		else if (!empty($this->options->defaultValue))
		{
			// Otherwise, this is an initial ingestion, so fill in the default
			$this->value = (string) $this->options->defaultValue;
		}
	}
	
	/**
	  * Delete this control from it's project
	  *
	  * @return void
	  */
	public function delete()
	{
		global $db;
		
		if (!$this->isOK()) return;
		
		if (!empty($this->rid))
		{
			$deleteCall = $db->query('DELETE FROM p'.$this->pid.'Data WHERE id='.escape($this->rid).' AND cid='.escape($this->cid).' LIMIT 1');
		}
		else
		{
			$deleteCall = $db->query('DELETE FROM p'.$this->pid.'Data WHERE cid='.escape($this->cid));
			$publicDeleteCall = $db->query('DELETE FROM p'.$this->pid.'PublicData WHERE cid='.escape($this->cid));
		}
		
		//function must be present in all delete extentions of base class, Control
		$this->deleteEmptyRecords();
	}
	
	/**
	  * Prints control view for public ingestion
	  *
	  * @param bool $isSearchForm Is this for a search form instead
	  *
	  * @return void
	  */
	public function display($isSearchForm=false)
	{
		$hasDef = false;
		if($this->value != ''){
			$hasDef = true;
		}
	
		if (!$this->StartDisplay($hasDef)) { return false; }
		if($isSearchForm){
			echo '<input name="'.$this->cName.'" id="'.$this->cName.'" size="25"/>';
		}
		else{
			if ((int) $this->options->rows < 2 && @(string)$this->options->textEditor != 'rich')
			{
				print '<input type="text" name="'.$this->cName.'" id="something" size="'.(int)$this->options->columns.'" value="'.htmlEscape($this->value).'"/>';
			}
			else
			{
				echo '<textarea ';
				if ((string)$this->options->textEditor == 'rich') echo 'class="ckeditor" id="ckeditor" ';
				echo 'name="'.$this->cName.'" id="'.$this->cName.'" ';
				echo 'rows="'.$this->options->rows.'" cols="'.$this->options->columns.'">'.$this->value.'</textarea>';
			}
		}
		$this->EndDisplay();
	}
	
	/**
	  * Print out the XML value of the TC
	  *
	  * @return void
	  */
	public function displayXML()
	{
		if(!$this->isOK()) return;
		$xml = '<text>'.xmlEscape($this->value).'</text>';
		return $xml;
	}
	
	public function getType() { return "Text"; }
	
	/**
	  * Return string to enter into a Kora_Clause
	  *
	  * @param string $submitData Submited data for control
	  *
	  * @return Search string on success
	  */
	public function getSearchString($submitData)
	{
		if(isset($submitData[$this->cName]) && !empty($submitData[$this->cName]))
		{
			return array(array('LIKE',"'%".$submitData[$this->cName]."%'"));
		}
		else
		{
			return false;
		}
	}
	
	/**
	  * Set the value of the XML imput
	  *
	  * @param string $value Value to set
	  *
	  * @return void
	  */
	public function setXMLInputValue($value)
	{
		$this->XMLInputValue = $value[0];
	}
	
	/**
	  * Ingest the data into the control
	  *
	  * @param string $publicIngest Are we ingesting the data publically
	  *
	  * @return void
	  */
	public function ingest($publicIngest = false)
	{
		global $db;
		
		if (!$this->isOK()) return;
		
		//determine whether to insert into public ingestion table or not
		if($publicIngest)
		{
			$tableName = 'PublicData';
		}
		else $tableName = 'Data';
		
		if (empty($this->rid))
		{
			echo '<div class="error">'.gettext('No Record ID Specified').'.</div>';
			return;
		}
		else if (isset($this->XMLInputValue))
		{
			$this->value = $this->XMLInputValue;
		}
		else if (!empty($_REQUEST) && isset($_REQUEST[$this->cName]))
		{
			$this->value = $_REQUEST[$this->cName];
		}
		else $this->value = '';
		
		// ingest the data
		$query = '';    // default blank query
		if ($this->existingData)
		{
			if ($this->isEmpty())
			{
				$query = 'DELETE FROM p'.$this->pid.$tableName.' WHERE id='.escape($this->rid).' AND cid='.escape($this->cid).' LIMIT 1';
			}
			else
			{
				$query = 'UPDATE p'.$this->pid.$tableName.' SET value='.escape($this->value).
				' WHERE id='.escape($this->rid).' AND cid='.escape($this->cid).' LIMIT 1';
			}
		}
		else
		{
			if (!$this->isEmpty())
			{
				$query = 'INSERT INTO p'.$this->pid.$tableName.' (id, cid, schemeid, value) VALUES ('.escape($this->rid).', '.escape($this->cid).', '.escape($this->sid).', '.escape($this->value).')';
			}
		}
		
		if (!empty($query)) $db->query($query);
	}
	
	/**
	  * Initialize function for control options
	  *
	  * @return void
	  */
	public static function initialOptions()
	{
		return '<options><regex></regex><rows>1</rows><columns>25</columns><defaultValue /><textEditor>plain</textEditor></options>';
	}
	
	/**
	  * Does this control have data in it?
	  *
	  * @return true on success
	  */
	public function isEmpty()
	{
		return !( !empty($_REQUEST[$this->cName]) || isset($this->XMLInputValue));
	}
	
	public function isXMLPacked() { return false; }
	
	/**
	  * Get the data from the control for display
	  *
	  * @return control data
	  */
	public function showData()
	{
		if (!empty($this->rid)) {
			if((string)$this->options->textEditor == 'rich'){
				include_once basePath.'ckeditor/ckeditor_include.php';
				return $this->value;
			}
			return htmlEscape($this->value);
		}
	}
	
	/**
	  * Gather information about control for display
	  *
	  * @param string $xml XML to write information to
	  * @param int $pid Project ID
	  * @param int $cid Control ID
	  *
	  * @return XML object
	  */
	public function storedValueToDisplay($xml,$pid,$cid)
	{
		global $db;
		$controlCheck = $db->query('SELECT options FROM p'.$pid.'Control WHERE cid='.escape($cid).' LIMIT 1');
		if ($controlCheck->num_rows > 0)
		{
			$controlCheck = $controlCheck->fetch_assoc();
			$this->options = simplexml_load_string($controlCheck['options']);
		}
		else
		{
			$this->options = simplexml_load_string($this->initialOptions());
		}
		if((string)$this->options->textEditor == 'rich')
		{
			include_once 'ckeditor/ckeditor_include.php';
			return $xml;
		}
		return htmlEscape($xml);
	}
	
	/**
	  * Gathers values from XML (TC Incompatible)
	  *
	  * @param string $xml XML object to get data from
	  *
	  * @return XML object
	  */
	public function storedValueToSearchResult($xml)
	{
		return $xml;
	}
	
	/**
	  * Validates the ingested data to see if it meets the data requirements for this control
	  *
	  * @param bool $publicIngest Is this a public ingestion
	  *
	  * @return Result string
	  */
	public function validateIngestion($publicIngest = false)
	{
		if ($this->required && ($this->isEmpty()))
		{
			return gettext('No value supplied for required field').': '.htmlEscape($this->name);
		}
		$pattern = (string) $this->options->regex;
		if (!empty($pattern))
		{
			if ($this->isEmpty() ||
				(!empty($_REQUEST) && isset($_REQUEST[$this->cName]) && preg_match($pattern, $_REQUEST[$this->cName])) ||
			(isset($this->XMLInputValue) && preg_match($pattern,$this->XMLInputValue)))
			{
				return '';
			}
			else
			{
				return gettext('Value supplied for field').': '.htmlEscape($this->name).' '.gettext('does not match the required pattern').'.';
			}
		}
		else
		{
			return '';
		}
	}
	
	/**
	  * Print out the control options for the control
	  *
	  * @return void
	  */
    public function PrintControlOptions()
	{
		Control::PrintControlOptions();
		$this->showDialog();
	}
	
	/**
	  * Print out each menu piece of the control options
	  *
	  * @return void
	  */
	public function showDialog()
	{
		print "<div class='kora_control kora_control_opts' pid='{$this->pid}' cid='{$this->cid}'>";
		$this->OptPrintDefaultValue();
		$this->OptPrintSize();
		$this->OptPrintRegEx();
		$this->OptPrintPresets();
		$this->OptPrintSavePreset();
		$this->OptPrintSaveEditor();
		print "</div>";
	}
	
	// TODO:  KILL ALL OF THESE UGLY TABLES
	/**
	  * Print out table for default value
	  *
	  * @return void
	  */
	protected function OptPrintDefaultValue()
	{ 
		$xml = $this->GetControlOptions();
		if(!$xml) return;
		?>
		<table class="table kcopts_style">
		<tr>
		<td width="60%" class="kcopt_label"><b><?php echo gettext('Default Value')?></b><br />(<?php echo gettext('Leave blank to have no initial value')?>)</td>
		<td>
		<?php
		if ((int) $xml->rows < 2)
		{
			echo '<input type="text" name="defaultValue" class="kctcopts_defval" size="'.(int)$xml->columns.'" value="'.htmlEscape($xml->defaultValue).'"/>';
		}
		else
		{
			echo '<textarea name="defaultValue" class="kctcopts_defval" ';
			echo 'rows="'.$xml->rows.'" cols="'.$xml->columns.'">'.$xml->defaultValue.'</textarea>';
		}
		?>
		<input type="button" value="<?php echo gettext('Update')?>" class="kctcopts_defset" />
		</td>
		</tr>
		</table>
	<?php }
	
	/**
	  * Print out table for text size
	  *
	  * @return void
	  */
	protected function OptPrintSize()
	{ 
		$xml = $this->GetControlOptions();
		if(!$xml) return;
		?>
		<table class="table kcopts_style">
		<tr>
		<td width="60%" class="kcopt_label"><b><?php echo gettext('Size')?></b></td>
		<td>
		<table border="0">
		<tr>
		<td class="kcopt_label"><?php echo gettext('Rows')?>:</td>
		<td><input type="text" name="textareaRows" class="kctcopts_rows" value="<?php echo htmlEscape($xml->rows)?>" /></td>
		</tr>
		<tr>
		<td class="kcopt_label"><?php echo gettext('Columns')?>:</td>
		<td><input type="text" name="textareaCols" class="kctcopts_cols" value="<?php echo htmlEscape($xml->columns)?>" /></td>
		</tr>
		</table>
		</td>
		</tr>
		</table>
	<?php }
	
	/**
	  * Print out table for regular expression
	  *
	  * @return void
	  */
	protected function OptPrintRegEx()
	{ 
		$xml = $this->GetControlOptions();
		if(!$xml) return;
		?>
		<table class="table kcopts_style">
		<tr>
		<td width="60%" class="kcopt_label"><b><?php echo gettext('Regular Expression Match')?></b><br />(<?php echo gettext('Leave blank to allow any input')?>;
			<?php  printf('use %s otherwise', '<a target="_blank" href="http://perldoc.perl.org/perlretut.html">'.gettext('Perl-style RegEx').'</a>')?>)</td>
		<td><input type="text" name="regex" class="kctcopts_regex" value="<?php echo htmlEscape($xml->regex)?>" />
		<input type="button" value="<?php echo gettext('Update')?>" class="kctcopts_regexset" />
		</td>
		</tr>
		</table>
	<?php }
	
	/**
	  * Print out table for presets
	  *
	  * @return void
	  */
	protected function OptPrintPresets()
	{ 
		global $db;
		$xml = $this->GetControlOptions();
		if(!$xml) return;
		?>
		<table class="table kcopts_style">
		<tr>
		<td width="60%" class="kcopt_label"><b><?php echo gettext('Presets')?></b><br /><?php echo gettext('Pre-created Regular Expressions to match common patterns for your convieneince');?></td>
		<td><select name="textPreset" class="kctcopts_presetname" >
		<?php
		// Get the list of Text Control Presets
		$presetQuery = $db->query('SELECT name, presetid FROM controlPreset WHERE class=\'TextControl\' AND (global=1 OR project='.$this->pid.') ORDER BY name');
		while($preset = $presetQuery->fetch_assoc())
		{
			echo "<option value=\"$preset[presetid]\">".htmlEscape($preset['name']).'</option>';
		}
		?>
		</select> <input type="button" class="kctcopts_presetuse" value="<?php echo gettext('Use Preset')?>" /><br />
		</td>
		</tr>
		</table>
	<?php }
	
	/**
	  * Print out table for saving presets
	  *
	  * @return void
	  */
	protected function OptPrintSavePreset()
	{ 
		$xml = $this->GetControlOptions();
		if(!$xml) return;
		?>
		<table class="table kcopts_style">
		<tr>
		<td width="60%" class="kcopt_label"><b><?php echo gettext('Create New Preset')?></b><br /><?php echo gettext("If you would like to save this regular expression as a preset, enter a name and click 'Save as Preset'")?>.</td>
		<td><input type="text" name="presetName"  class="kctcopts_presetnew" /> <input type="button" class="kctcopts_presetsave" value="<?php echo gettext('Save as Preset')?>" /></td>
		</tr>
		</table>
	<?php }
	
	/**
	  * Print out table for choosing editor
	  *
	  * @return void
	  */
	protected function OptPrintSaveEditor()
	{ 
		$xml = $this->GetControlOptions();
		if(!$xml) return;
		?>
		<table class="table kcopts_style">
		<tr>
		<td width="60%" class="kcopt_label"><b><?php echo gettext('Editor')?></b><br /><?php echo gettext("Choose the type of editor you would like to use with this control");?>.</td>
		<td>
		<input type="radio" name="textEditor" class="kctcopts_editor" value="plain" <?php if(!empty($xml->textEditor) && $xml->textEditor != 'rich') echo 'checked="checked"';?>/> <label for="plainEditor"><?php echo gettext("Plain-text editor");?></label><br/>
		<input type="radio" name="textEditor" class="kctcopts_editor" value="rich" <?php if(!empty($xml->textEditor) && $xml->textEditor == 'rich') echo 'checked="checked"';?>/> <label for="richTextEditor"><?php echo gettext("Rich-text editor");?></label><br/>
		</tr>
		</table>
	<?php }
	
	//End ugly table killing
	
	/**
	  * Update the regular expression for TC
	  *
	  * @param string $regex Regex statement
	  *
	  * @return Result string on success
	  */
	public function updateRegEx($regex) {
		$this->SetExtendedOption('regex', xmlEscape($regex));
		echo gettext('Regular Expression Updated').'.<br /><br />';
	}
	
	/**
	  * Set default value for TC
	  *
	  * @param string $default Default value
	  *
	  * @return Result string on success
	  */
	public function updateDefaultValue($default)
	{
		$this->SetExtendedOption('defaultValue', xmlEscape($default));
		echo gettext('Default Value Updated').'.<br /><br />';
	}
	
	/**
	  * Update text size requirements for TC
	  *
	  * @param int $rows Allowed number of rows
	  * @param int $columns Allowed number of columns
	  *
	  * @return Result string on success
	  */
	public function updateSize($rows, $columns)
	{
		$xml = $this->GetControlOptions();
		
		$newRows = (int) $rows;
		$newColumns = (int) $columns;
		if ($newRows > 0 && $newColumns > 0)
		{
			// NO XML ESCAPE, SHOULD BE CAST TO INT ALREADY..
			$this->SetExtendedOption('rows', $newRows);
			$this->SetExtendedOption('columns', $newColumns);
			echo gettext('Size Updated').'.<br /><br />';
		}
		else
		{ echo gettext('The number of rows and columns must be a positive integer').'.'; }
	}
	
	/**
	  * Update which type of text editor to use
	  *
	  * @param string $textEditor Editor to use
	  *
	  * @return Result string on success
	  */
	public function updateEditor($textEditor)
	{
		$this->SetExtendedOption('textEditor', xmlEscape($textEditor));
		if($textEditor == 'rich') echo gettext('Text Editor Updated.  Using Rich-Text Editor.').'<br /><br />';
		else echo gettext('Text Editor Updated.  Using Plain-Text Editor.').'<br /><br />';
	}

	/**
	  * Assign a preset regex value to TC
	  *
	  * @param string $newPresetID Preset ID
	  *
	  * @return Result string on success
	  */
	public function usePreset($newPresetID)
	{
		global $db;
		
		$existenceQuery = $db->query('SELECT value FROM controlPreset WHERE class=\'TextControl\' AND presetid='.escape($newPresetID).' LIMIT 1');
		
		if ($existenceQuery->field_count > 0)
		{
			$existenceQuery = $existenceQuery->fetch_assoc();
			
			$xml = $this->GetControlOptions();
			
			$xml->regex = $existenceQuery['value'];
			
			$this->SetControlOptions($xml);
			
			echo gettext('Preset Selected').'.<br /><br />';
		}
	}
	
	/**
	  * Save a TC regex value as a preset
	  *
	  * @param string $name Name of preset
	  * @param string $regex Regex pattern for preset
	  *
	  * @return Result string on error
	  */
	public function savePreset($name, $regex)
	{
		global $db;
		
		$dupeQuery = $db->query('SELECT name FROM controlPreset WHERE class=\'TextControl\' AND name='.escape($name).' LIMIT 1');
		
		if ($dupeQuery->num_rows > 0)
		{
			echo gettext('There is already a Text Control Preset with the name').': '.$name;
		}
		else
		{
			$db->query('INSERT INTO controlPreset(name, class, project, global, value) VALUES ('.escape($name).", 'TextControl', ".escape($this->pid).", 0, ".escape($regex).')');
		}
	}
	
}

?>

