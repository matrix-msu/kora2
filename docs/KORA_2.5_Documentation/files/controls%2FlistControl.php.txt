<?php
/**
Copyright (2008) Matrix: Michigan State University

This file is part of KORA.

KORA is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

KORA is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>. */

// Initial Version: Brian Beck, 2008
// Refactor: Joe Deming, Anthony D'Onofrio 2013

require_once(__DIR__.'/../includes/includes.php');
Manager::AddJS('controls/listControl.js', Manager::JS_CLASS); 

/**
 * @class ListControl object
 *
 * This class respresents a ListControl in KORA
 */
class ListControl extends Control {
	
	protected $name = "List Control";
	protected $options;
	
	/**
	  * Standard constructor for a control. See Control::Construct for details.
	  *
	  * @return void
	  */
	public function ListControl($projectid='', $controlid='', $recordid='', $inPublicTable = false)
	{
		if (empty($projectid) || empty($controlid)) return;
		global $db;
		
		$this->Construct($projectid,$controlid,$recordid,$inPublicTable);
		
		// If data exists for this control, get it
		if (!empty($this->rid))
		{
			$this->LoadValue();
		}
		else if (!empty($this->options->defaultValue))
		{
			// Otherwise, this is an initial ingestion, so fill in the default
			$this->value = (string) $this->options->defaultValue;
		}
	}
	
	/**
	  * Delete this control from it's project
	  *
	  * @return void
	  */
	public function delete()
	{
		global $db;
		
		if (!$this->isOK()) return;
		
		if (!empty($this->rid)) $deleteCall = $db->query('DELETE FROM p'.$this->pid.'Data WHERE id='.escape($this->rid).' AND cid='.escape($this->cid).' LIMIT 1');
		else {
			$deleteCall = $db->query('DELETE FROM p'.$this->pid.'Data WHERE cid='.escape($this->cid));
			$publicDeleteCall = $db->query('DELETE FROM p'.$this->pid.'PublicData WHERE cid='.escape($this->cid));
		}
		
		//function must be present in all delete extentions of base class, Control
		$this->deleteEmptyRecords();
	}
	
	/**
	  * Prints control view for public ingestion
	  *
	  * @return void
	  */
	public function display()
	{
		$hasDef = false;
		if($this->value != null){
			$hasDef = true;
		}
		if (!$this->StartDisplay($hasDef)) { return false; }
		
		print '<select name="'.$this->cName.'">';
		// default blank option
		echo '<option value=""';
		if (empty($this->value)) echo ' selected="selected"';
		echo '>&nbsp;</option>';
		
		// display the options, with the current value selected.
		foreach($this->options->option as $option) {
			echo "<option value=\"$option\"";
			if ($this->value == $option) echo ' selected="selected"';
			echo ">$option</option>\n";
		}
		
		echo '</select></div>';
	}
	
	//TODO: AUTOFILL NEEDS TO BE REDONE
	/*public function displayAutoFill($category) {
		
		print '<select name="af_'.$category.'" class="af_'.$category.'">';
		
		// display the options, with the current value selected.
		foreach($this->options->option as $option) {
			echo "<option value=\"$option\">$option</option>\n";
		}
		
		echo '</select>';
		
		$this->EndDisplay();
	}*/
	
	/**
	  * Print out the XML value of the LC
	  *
	  * @return void
	  */
	public function displayXML() {
		if(!$this->isOK()) return;
		
		$xmlstring = '<list>'.xmlEscape($this->value).'</list>';
		
		return $xmlstring;
	}
	
	/**
	  * Return string to enter into a Kora_Clause
	  *
	  * @param string $submitData Submited data for control
	  *
	  * @return Search string on success
	  */
	public function getSearchString($submitData) {
		if(isset($submitData[$this->cName]) && !empty($submitData[$this->cName]))
			return array(array('=',"'".$submitData[$this->cName]."'"));
		else
    		return false;
    }
	
    public function getType() { return "List"; }

    /**
	  * Set the value of the XML imput
	  *
	  * @param string $value Value to set
	  *
	  * @return void
	  */
    public function setXMLInputValue($value) {
    	$this->XMLInputValue = $value[0];
    }
    	
   /**
	  * Ingest the data into the control
	  *
	  * @param string $publicIngest Are we ingesting the data publically
	  *
	  * @return void
	  */
	public function ingest($publicIngest = false)
	{
		global $db;
		
		if (!$this->isOK()) return;
		
		//determine whether to insert into public ingestion table or not
		if($publicIngest)
		{
			$tableName = 'PublicData';
		}
		else $tableName = 'Data';
		
		if (empty($this->rid)) {
			echo '<div class="error">'.gettext('No Record ID Specified').'.</div>';
			return;
		} else if (isset($this->XMLInputValue)){
			$this->value = $this->XMLInputValue;
		} else if (!empty($_REQUEST) && isset($_REQUEST[$this->cName])) {
			$this->value = $_REQUEST[$this->cName];
		} else $this->value = '';
		
		// ingest the data
		$query = '';    // default blank query
		if ($this->existingData) {
			if ($this->isEmpty()) $query = 'DELETE FROM p'.$this->pid.$tableName.' WHERE id='.escape($this->rid).
				' AND cid='.escape($this->cid).' LIMIT 1';
			else $query = 'UPDATE p'.$this->pid.$tableName.' SET value='.escape($this->value).
			' WHERE id='.escape($this->rid).' AND cid='.escape($this->cid).' LIMIT 1';
		} else {
			if (!$this->isEmpty()) $query = 'INSERT INTO p'.$this->pid.$tableName.' (id, cid, schemeid, value) VALUES ('.escape($this->rid).', '.escape($this->cid).', '.escape($this->sid).', '.escape($this->value).')';
		}
		
		if (!empty($query)) $db->query($query);
	}
	
	/**
	  * Initialize function for control options
	  *
	  * @return void
	  */
	public static function initialOptions()
	{
		return '<options><defaultValue /></options>';
	}
	
	/**
	  * Does this control have data in it?
	  *
	  * @return true on success
	  */
	public function isEmpty()
	{
		return !( !empty($_REQUEST[$this->cName]) || isset($this->XMLInputValue));
	}
	
	public function isXMLPacked() { return false; }
	
	/**
	  * Get the data from the control for display
	  *
	  * @return control data
	  */
	public function showData()
	{
		if (!empty($this->rid)) return htmlEscape($this->value);
	}
	
	/**
	  * Gather information about control for display (LC Incompatible)
	  *
	  * @param string $xml XML to write information to
	  * @param int $pid Project ID
	  * @param int $cid Control ID
	  *
	  * @return XML object
	  */
	public function storedValueToDisplay($xml,$pid,$cid)
	{
		return $xml;
	}
	
	/**
	  * Gathers values from XML (LC Incompatible)
	  *
	  * @param string $xml XML object to get data from
	  *
	  * @return XML object
	  */
	public function storedValueToSearchResult($xml)
	{
		return $xml;
	}
	
	/**
	  * Validates the ingested data to see if it meets the data requirements for this control
	  *
	  * @param bool $publicIngest Is this a public ingestion
	  *
	  * @return Result string
	  */
	public function validateIngestion($publicIngest = false)
	{
		if (isset($this->XMLInputValue)) {
			$value = $this->XMLInputValue;
		} else if (!empty($_REQUEST) && isset($_REQUEST[$this->cName])){
			$value = $_REQUEST[$this->cName];
		}
		
		foreach ($this->options->option as $option) {
			$optionArray[] = (string) $option;
		}
		
		if (!$this->required) return '';
		if ($this->isEmpty()) {
			return gettext('No value supplied for required field').': '.htmlEscape($this->name);
		} else if (isset($value) && !in_array((string) $value,$optionArray)) {
			return '"'.htmlEscape($value).gettext('" is not an valid value for '.$this->GetName());
		}
		else
		return '';
	}
	
	/**
	  * Print out the control options for the control
	  *
	  * @return void
	  */
	public function PrintControlOptions()
	{
		Control::PrintControlOptions();
		$this->showDialog();
	}
	
	/**
	  * Print out each menu piece of the control options
	  *
	  * @return void
	  */
	public function showDialog()
	{
		print "<div class='kora_control kora_control_opts' pid='{$this->pid}' cid='{$this->cid}'>";
		$this->OptPrintListOption();
		$this->OptPrintDefValue();
		$this->OptPrintPresets();
		$this->OptPrintNewPreset();
		//TODO: AUTOFILL NEEDS TO BE REDONE
		//$this->OptPrintSetAutoFill();
		print "</div>";
	}
	
	/**
	  * Print out table for List options
	  *
	  * @return void
	  */
	protected function  OptPrintListOption(){
		$xml = $this->GetControlOptions();
		if(!$xml) return;
		?>
		
		<div class="kora_control kora_control_opts" pid="<?php echo $this->pid; ?>" cid="<?php echo $this->cid; ?>">
		<table class="table kcopts_style">
		<tr>
		<td width="60%" class="kcopt_label"><b><?php echo gettext('List Options')?></b><br /><?php echo gettext('These are the choices users will be presented with when ingesting')?>.</td>
		<td><select name="listOptions" class='kclcopts_listOpt' size="7">
		<?php
		// display all the modifiers
		foreach($xml->option as $option) {
			echo '<option>'.htmlEscape($option).'</option>'."\n";
		}
		?>
		</select><br />
		<input type="button" class='kclcopts_loBtnUp' value="<?php echo gettext('Up')?>" />
		<input type="button" class='kclcopts_loBtnDown' value="<?php echo gettext('Down')?>" />
		<input type="button" class='kclcopts_loBtnRemove' value="<?php echo gettext('Remove')?>" />
		<br /><br /><input type="text" name="newOption" class='kclcopts_newOpt' />
		<input type="button" class='kclcopts_noBtnAddOption' value="<?php echo gettext('Add Option')?>" />
		</td>
		</tr>
		</table>
		
		<?php
	}
	
	/**
	  * Print out table for default value
	  *
	  * @return void
	  */
	protected function  OptPrintDefValue(){
		$xml = $this->GetControlOptions();
		if(!$xml) return;
		?>
		
		<table class="table kcopts_style">
		<tr>
		<td width="60%" class="kcopt_label"><b><?php echo gettext('Default Value')?></b><br /><?php echo gettext('Optionally, select a value which will be initially selected upon first ingestion')?>.</td>
		<td><select name="defaultOption" class='kclcopts_defOpt'>
		<option<?php if (empty($xml->defaultValue)) echo ' selected="selected"'; ?>>&nbsp;</option>
		<?php
		// display all the modifiers
		foreach($xml->option as $option) {
			echo '<option';
			if ($option == (string) $xml->defaultValue)
			{
		            	echo ' selected="selected"';
		        }
		        echo '>'.htmlEscape($option).'</option>'."\n";
		}
		?>
		</select><br />
		<input type="button" class='kclcopts_doUpdate' value="<?php echo gettext('Update')?>" />
		</td>
		</tr>
		</table>
		
		<?php
	}
	
	/**
	  * Print out table for presets
	  *
	  * @return void
	  */
	protected function  OptPrintPresets(){
		$xml = $this->GetControlOptions();
		if(!$xml) return;
		
		global $db;
		?>
		
		<table class="table kcopts_style">
		<tr>
		<td width="60%" class="kcopt_label"><b><?php echo gettext('Presets')?></b><br /><?php echo gettext('Sets of pre-defined list values which are commonly used')?></td>
		<td><select name="listPreset" class='kclcopts_listPre'>
		<?php
		// Get the list of List Control Presets
		$presetQuery = $db->query('SELECT presetid, name FROM controlPreset WHERE class=\'ListControl\' AND (global=1 OR project='.$this->pid.') ORDER BY name');
		while($preset = $presetQuery->fetch_assoc())
		{
			echo "<option value=\"$preset[presetid]\">".htmlEscape($preset['name']).'</option>';
		}
		?>
		</select> <input type="button" class='kclcopts_lpBtnUsePreset' value="<?php echo gettext('Use Preset')?>" /></td>
		</tr>
		</table>
		
		<?php
	}
	
	/**
	  * Print out table for new preset creation
	  *
	  * @return void
	  */
	protected function  OptPrintNewPreset(){
		$xml = $this->GetControlOptions();
		if(!$xml) return;
		?>
		
		<table class="table kcopts_style">
		<tr>
		<td width="60%" class="kcopt_label"><b><?php echo gettext('Create New Preset')?></b><br /><?php echo gettext("If you would like to save this set of allowed file types as a preset, enter a name and click 'Save as Preset'")?>.</td>
		<td><input type="text" name="presetName" class='kclcopts_preName' /> <input type="button" class='kclcopts_pnBtnSavePreset' value="<?php echo gettext('Save as Preset')?>" /></td>
		</tr>
		</table>
		
		<?php
	}
	
	//TODO: AUTOFILL NEEDS TO BE REDONE
	/*protected function  OptPrintSetAutoFill(){
		$xml = $this->GetControlOptions();
		if(!$xml) return;
		
		global $db;
		?>
		
		<table class="table kcopts_style">
		<tr>
		<td width="60%" class="kcopt_label"><b><?php echo  gettext('Set AutoFill (TODO)')?></b><br/><?php echo gettext("Choose a control to auto select a value for this control when specific value is selected.")?></td>
		<td>
		<?php
		if (!isset($xml->autoFillBy)) {
			?>
			<select name="autoFillSelect" class='kclcopts_autoFillSel' onchange="">
			<?php
			//get all schemes in project
			$schemeQuery = $db->query("SELECT cid,name,type FROM p".$this->pid."Control WHERE schemeid=".$_REQUEST['sid']." AND cid!=".$_REQUEST['cid']." ORDER BY name");
			while( $scheme = $schemeQuery->fetch_assoc() ) {
				if($scheme['type']=="ListControl" | $scheme['type']=="DateControl"){
					echo '<option value="'.$scheme['cid'].'">'.$scheme['name'].'</option>';
				}
			}
			?>
			</select> <input type="button" class='kclcopts_afsBtnSelectCon' value="<?php echo gettext('Select Control')?>" />
			<div id="autoFillOptions"></div>
			<?php
		}
		else {
			$query = 'SELECT name,type FROM p'.$this->pid.'Control WHERE schemeid='.$this->sid.' AND cid='.$xml->autoFillBy.' LIMIT 1';
			$query = $db->query($query);
			$fromData = $query->fetch_assoc();
			
			?><p>Auto Fill By: <?php echo $fromData['name']?></p>
			Rules: <br/>
			
			<?php
			$cTable = 'p'.$this->pid.'Control';
		        $query = $db->query("SELECT $cTable.type AS class, control.file AS file FROM $cTable LEFT JOIN control ON ($cTable.type = control.class) WHERE cid=".escape($xml->autoFillBy).' LIMIT 1');
		        $query = $query->fetch_assoc();
		        require_once(basePath.CONTROL_DIR.$query['file']);
		        $controlClass = $query['class'];
		        
		        $fromControl = new $controlClass($this->pid,$xml->autoFillBy);
		        $toControl = new ListControl($this->pid,$this->cid);
		        
		        //show existing rules
		        $autoFillRules = $xml->autoFillRules;
		        
		        echo '<table>';
		        foreach($autoFillRules->children() as $param) {
		        	$from = $param->from;
		        	$id = $param->attributes()->id;
		        	echo '<tr class="autoFillRuleRow" id="'.$id.'">';
		        	$paramValues = array();
		        	
		        	echo '<td>';
		        	if($fromData['type'] == 'DateControl') {
		        		$paramValues[] = $fromControl->formatDateForDisplay($from->val0->month,$from->val0->day,$from->val0->year,$from->val0->era,true,"MDY");
		        		$paramValues[] = $fromControl->formatDateForDisplay($from->val1->month,$from->val1->day,$from->val1->year,$from->val1->era,true,"MDY");
		        	} else {
		        		$paramValues[] = $from->op.' '.$from->value;
		        	}
		        	echo implode(' - ',$paramValues);
		        	echo '</td>';
		        	
		        	echo '<td>';
		        	echo $param->to;
		        	echo '</td>';
		        	
		        	echo '<td><a onclick="removeAutoFillRuleById('.$id.')">X</a></td>';
		        	echo '</tr>';
		        }
		        
		        
		        //show rule creator
		        ?>
		        <table><tr><td>
		        <?php echo $fromControl->displayAutoFill('param_val');?>
		        </td><td>
		        <?php echo $toControl->displayAutoFill('value');?>
		        </td><td>
		        <button class='kclcopts_afsBtnAddRule';">Add</button>
		        </td></tr></table>
		        <?php
		}
		?>
		</td>
		</tr>
		</table>
		</div>
		
		<?php
	}
	*/
	
	/**
	  * Set various options for the LC
	  *
	  * @param Array[string] $options Options to set
	  *
	  * @return void
	  */
	public function updateListOpts($options){
		foreach ($options as &$val)
			{ $val = xmlEscape($val); }
		
		$this->SetExtendedOption('option', array_unique($options) );
	}
	
	/**
	  * Set default value for the LC
	  *
	  * @param string $default Default value
	  *
	  * @return void
	  */
	public function updateDefValue($default){
		$this->SetExtendedOption('defaultValue', xmlEscape($default));
	}
	
	/**
	  * Set the 
	  *
	  * @param int $newPresetID Preset ID
	  *
	  * @return void
	  */
	public function updatePresets($newPresetID){
		global $db;
		
		$existenceQuery = $db->query('SELECT value FROM controlPreset WHERE class=\'ListControl\' AND presetid='.escape($newPresetID).' LIMIT 1');
		
		if ($existenceQuery->field_count > 0)
		{
			$existenceQuery = $existenceQuery->fetch_assoc();
			
			$options = preg_split('/(<\/option><option>|<options><option>|<\/option><\/options>)/', $existenceQuery['value']);
			array_shift($options);
			array_pop($options);
			
			$this->updateListOpts($options);
		}
	}
	
	/**
	  * Save a new preset for ListControls in Kora
	  *
	  * @param string $name Name of preset
	  *
	  * @return void
	  */
	public function saveNewPreset($name){
		global $db;
		
		// casting to integer (and then checking if it's 0 or below) sanitizes
		// the data and prevents malicious strings from being passed
		$freeNameQuery = $db->query('SELECT presetid FROM controlPreset WHERE class=\'ListControl\' AND name='.escape($name).' LIMIT 1');
		if ($freeNameQuery->num_rows > 0)
		{
			echo gettext('There is already a List Control preset with the name').': '.htmlEscape($name);
		}
		else if ($this->cid < 0 || $this->pid < 0)
		{
			echo gettext('Invalid Project or Control ID');
		}
		else
		{
			$xml = $this->GetControlOptions();
			
			$newXML = simplexml_load_string('<options />');
			if (isset($xml->option))
			{
				foreach($xml->option as $option)
				{
					$newXML->addChild('option', xmlEscape((string) $option));
				}
			}
			
			$db->query('INSERT INTO controlPreset (name, class, project, global, value) VALUES ('.escape($name).", 'ListControl', ".$this->pid.", 0, ".escape($newXML->asXML()).')');
		}
	}
	
	//TODO: AUTOFILL NEEDS TO BE REDONE
	/*public function setAutoFillControl($autoFillCid) {
		global $db;
		
		$xml = $this->GetControlOptions();
        if(!$xml) return;
        
        $xml->addChild('autoFillBy',xmlEscape($autoFillCid));
        $xml->addChild('autoFillRules');
        
        $this->SetControlOptions($xml);
        
        //add autoFill option to $autoFillCid options to easily detect what to autofill
        $afXml = $this->GetControlOptions($autoFillCid);
        if(!$autoFillCid) return;
        
        $afXml->addChild('autoFill',xmlEscape($this->cid));
        
        $this->SetControlOptions($afXml, $autoFillCid);
        echo gettext('Auto Fill Control Updated').'.<br /><br />';
	}
	
	public function addAutoFillRule($fillValue,$paramRules,$numOfRules,$pid,$sid) {
		global $db;
		
	
		//if the param operator is between and there are not 2 values, it
		//is bad input, and return without adding a autofill rule
		if ( $paramRules['op'] == 'between' && sizeof($paramRules) < 3 ) {
			return;
		}
		
		$xml = $this->GetControlOptions();
        if(!$xml) return;
		
		if (isset($xml->autoFillBy)) {
			$query = 'SELECT type FROM p'.$pid.'Control WHERE schemeid='.$sid.' AND cid='.$xml->autoFillBy.' LIMIT 1';
			$query = $db->query($query);
			$fromData = $query->fetch_assoc();
			
			$newXML = $this->createAutoFillRule($xml,$fillValue,$paramRules,$fromData['type'],$numOfRules);
			
			$this->SetControlOptions($newXML);
		}
	}
	
	/**
	 * Add autofill rule to a control
	 * @param xml - xml options of control to autofill
	 * @param fillValue - value to autofill  based on paramRules
	 * @param paramRules - rules to autofill fillValue
	 * @param fromType - control type of the paramControl
	 * @param ruleNum - id attribute of the param tag 
	 *
	public static function createAutoFillRule($xml,$fillValue,$paramRules,$fromType,$ruleNum) {
		$rules = $xml->autoFillRules;
		$rule = $rules->addChild('param');
		$rule->addAttribute('id',$ruleNum);
		
		$rule->addChild('to',$fillValue);
		$from = $rule->addChild('from');
		
		$i = 0;
		while (isset($paramRules["val$i"])) {
			if (is_array($paramRules["val$i"]) && $fromType == 'DateControl') {
				$val = $from->addChild("val$i");
				foreach ($paramRules["val$i"] as $type=>$value) {
					$val->addChild($type,trim($value));
				}
			}
			else {
				$from->addChild("val$i",$paramRules["val$i"]);
			}
			++$i;
		}
		$from->addChild('op',$paramRules["op"]);
		
		return $xml;
	}
	
	function removeAutoFillRuleById($cid,$attId) {
    	$xml = getControlOptions($cid);
        if(!$xml) return;
        
        $newXML = simplexml_load_string('<?xml version="1.0"?><options>'.removeXMLByAttribute($xml,'id',$attId).'</options>');
        
        setControlOptions($cid, $newXML);
    }
	*/
}

?>

