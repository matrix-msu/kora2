<?php
/**
 Copyright (2008) Matrix: Michigan State University

 This file is part of KORA.

 KORA is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 KORA is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//Initial version Rob Allie, 2010
// Refactor: Joe Deming, Anthony D'Onofrio 2013

require_once('includes/includes.php');

global $db;

Manager::Init();

Manager::RequireLogin();
Manager::RequireProjectAdmin();
Manager::RequireProject();
Manager::RequireScheme();

if(!Manager::CheckRequestsAreSet(['download']))
{
	
	$pid = Manager::GetProject()->GetPID();
	$sid = Manager::GetScheme()->GetSID();
	
	
	//If no control results, the scheme has no controls - stop processing
	$allctrls = array();
	foreach (Manager::GetScheme()->GetControls() as $coll)
	{
		$allctrls = array_merge($allctrls, $coll['controls']);
	}
	if(sizeof($allctrls) == 0){
		Manager::PrintHeader();
		echo gettext("No controls for scheme ").Manager::GetScheme()->GetName().gettext(" of project ").Manager::GetProject()->GetName();
		Manager::PrintFooter();
		die();
	}
		
	$z = 0;//initialize index for # of zip files (files can only be 4gb)
	$zipSize = 0;//initialize size of current zip being prepared
	$sizeArray = array();//to keep track of each zip files size
	$zipArray = array();//array to hold the arrays of zip paths
	$zipFiles = array();//array to hold the zip paths
	$id = '';
	
	$results = KoraSearch::SortedInternalSearchResults(Manager::GetProject()->GetPID(), Manager::GetScheme()->GetSID());
	
	foreach ($results as $kid)
	{
		$r = new Record(Manager::GetProject()->GetPID(), Manager::GetScheme()->GetSID(), $kid);
		
		foreach ($r->GetControls() as $c)
		{ 
			if ($c->HasFileStored() && $c->HasData())
			{
				

				$fileSize = filesize($c->GetPath());
				$zipSize += $fileSize;
				$fileArray = ["path" => $c->GetPath(), "name" => $c->GetLocalName() ];
				if($zipSize < KORA_MAXEXPORTZIPSIZE)//check if zip will be less than 4gb
				{
					if(!array_key_exists($z, $zipArray))
					{
						$zipArray[$z] = array();
					}
					if(file_exists($c->GetPath()))
					{
						$zipArray[$z][] = $fileArray;
					}
				}
				else//zip size is greater than 4gb and we need a new array (new zip)
				{
					$sizeArray[$z] = $zipSize - $fileSize;
					$z++;
					$zipArray[$z] = array();
					$zipArray[$z][] = $fileArray;//we also need to add the current filepath
					$zipSize = $fileSize;//zip size is now current file size
				}
				$sizeArray[$z] = $zipSize;
			}
		}
	}
}

//for zip creation
if(Manager::CheckRequestsAreSet(['zip']))
{
	$zipIndex = $_REQUEST['zip'];
	$zipNum = $zipIndex+1;
	$dest = tempnam(sys_get_temp_dir(),'foo');
	
	$name = Manager::GetProject()->GetName().'-'.Manager::GetScheme()->GetName().'-files_';
	$name = str_replace(" ", "_", $name);
	$name = htmlentities($name);
            
	
	$zip = new ZipArchive();
	$zip->open($dest, ZIPARCHIVE::CREATE | ZIPARCHIVE::OVERWRITE);
	foreach($zipArray[$zipIndex] as $file)
	{
		$zip->addFile($file['path'],$name.$zipNum."/".$file['name']);
	}
	$zip->close();


	//send headers and the file directly
	header("Content-Type: application/zip");
	header("Content-Disposition: attachment;filename=$name$zipNum.zip");
	header("Content-Transfer-Encoding: binary");
	header("Content-Length: ".filesize($dest));
	
	readfile($dest);
	
	//Delete the temporary file ... don't clutter the server
	unlink($dest);
	
	exit();
}

if(!Manager::CheckRequestsAreSet(['zip']) && !Manager::CheckRequestsAreSet(['download']))
{
	//echo "<pre>";print_r($zipArray);echo "</pre>";//zip data
	Manager::PrintHeader();
	
	
	//javascript includes?>
	<?php
	
	$noData = false;
	$query = "SELECT count(*) from p".Manager::GetProject()->GetPID()."Data WHERE schemeid='".Manager::GetScheme()->GetSID()."'";
	$result = $db->query($query);
	if($result->fetch_row()[0]=='0'){$noData=true;}
	
	echo "<h4>Download XML</h4>";
	if($noData){
		echo gettext("No data for scheme ").'"'.Manager::GetScheme()->GetName().'"'.gettext(" of project ").'"'.Manager::GetProject()->GetName().'".'.'</a><br /><br />';
		echo '<a href="schemeExport.php?pid='.Manager::GetProject()->GetPID().'&sid='.Manager::GetScheme()->GetSID().'&type=scheme">'.gettext('Download the Scheme xml.').'</a><br /><br />';
	}else{
		echo '<a href="schemeExport.php?pid='.Manager::GetProject()->GetPID().'&sid='.Manager::GetScheme()->GetSID().'&type=data&scheme='.$sid.'">'.gettext('Download the Record Data xml.').'</a><br /><br />';
		echo '<a href="schemeExport.php?pid='.Manager::GetProject()->GetPID().'&sid='.Manager::GetScheme()->GetSID().'&type=scheme">'.gettext('Download the Scheme xml.').'</a><br /><br />';
	}
	
	if($zipSize>0){
		echo "<h4>Download Files</h4>";
		echo gettext("This export requires files located in ").($z+1).gettext(" zip file(s).")."<br /><br />";
		echo gettext("Click on the apporopriate link to create and download each file.")."<br />";
		echo gettext("These files may take a while to create and download depending on the size.")."<br /><br />";
		
		for($i=0;$i<sizeof($sizeArray);$i++)
		{
			$MB = $sizeArray[$i]/1000000;
			$MB = round($MB, 2);
			
			$name = Manager::GetProject()->GetName().'-'.Manager::GetScheme()->GetName().'-files_'.($i+1).".zip";
			$name = str_replace(" ", "_", $name);
			$name = htmlentities($name);
			
			
			echo "<a class='link kora_export_zip' zipindex='$i'>$name</a>  $MB MB <span id=\"dlmsg\"></span><br />";
		}
		?>
		<br />
		<?php
	}
}


Manager::PrintFooter();
?>

