<?php 


if(file_exists("includes/includes.php")){
	require_once("includes/includes.php");
}
else{
	require_once("includes.php");
}

function addToSolrIndexByRID($rid, $cid, $commit=true, $typecheck=true)
{
    if (!(@$solr_enabled)) return false;
    
    // The MIME types of files we will allow Solr to index.
    $solr_typelist = array("application/msword", "application/pdf", "text/plain");
    
    $fullid = $rid .'-'. $cid; // FULL ID, of form PID-SID-RID-CID
    
    $filePath = getFilenameFromRecordID($rid, $cid); // Absolute pathname so that Curl works
    
    if ($typecheck)
    {
    	$finfo = finfo_open(FILEINFO_MIME_TYPE); // Find the MIME type
    	$type = finfo_file($finfo, $filePath); 
    	finfo_close($finfo);
                
    	if ( !in_array($type, $solr_typelist) )
   		{
    		return false;  // If it's an un-indexable type, stop, return false
    	}
    }
    
    $req_url = solr_url."update/extract?literal.id=$fullid&commit="; // Curl request URL
    if ($commit) $req_url .= "true";
    else $req_url .= "false";
    
    $postfields = array("myfile" => "@$filePath"); // Fields to post, namely, the file
    
    $ch = curl_init($req_url); // Initialize
    curl_setopt($ch, CURLOPT_POST, 1); // We'll be doing POST, not GET
    curl_setopt($ch, CURLOPT_POSTFIELDS, $postfields); // Give the POST fields
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); // Return the string instead of auto-printing it
    
    $result = curl_exec($ch); // Execute
    
	// If for some reason Curl could not successfully connect, Solr probably isn't running, print an error
    if (curl_errno($ch) != 0)
    {
    	echo "ERROR: Could not connect to Solr. Please ensure that Solr is running on the server.";
    	return false;
    }
    
    curl_close($ch); // Close Curl
    try
    {
    	$xml = new SimpleXMLElement($result); // Parse $result
    
    	$status = (int)$xml->lst->int['status']; // Determine if Solr was successful or not, return that result
    
    	if ($status == 0) return true;
    }
    catch(Exception $e)
    {
    	return false;
    }
    
    return false;
}


function deleteFromSolrIndexByRID($rid, $cid, $commit=true)
{
    if (!(@$solr_enabled)) return false;
    
    $fullid = $rid .'-'. $cid;
        
    $req_url = solr_url."update?commit="; // Curl request URL
    
    if ($commit) $req_url .= "true";
    else $req_url .= "false";

    $ch = curl_init($req_url);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array("Content-Type: text/xml")); // We need this header for delete to work
    curl_setopt($ch, CURLOPT_POST, 1); // POSTing, not GETting
    curl_setopt($ch, CURLOPT_POSTFIELDS, "<delete><id>$fullid</id></delete>"); // The delete query for Solr
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); // Return the string instead of auto-printing
                        
    $result = curl_exec($ch); // Execute
    
	// If for some reason Curl could not successfully connect, Solr probably isn't running, print an error
    if (curl_errno($ch) != 0)
    {
    	echo "ERROR: Could not connect to Solr. Please ensure that Solr is running on the server.";
    	return false;
    }
                        
    curl_close($ch); // Close Curl
    try
    {
    	$xml = new SimpleXMLElement($result); // Parse $result
    
    	$status = (int)$xml->lst->int['status']; // Determine if Solr was successful or not, return that result
    
    	if ($status == 0) return true;
    }
    catch(Exception $e)
    {
    	return false;
    }
    
    return false;
}
?>
