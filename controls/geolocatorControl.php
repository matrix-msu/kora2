<?php
/**
Copyright (2009) Matrix: Michigan State University

This file is part of KORA.

KORA is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

KORA is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>. */

// Initial Version: Ben Pedersen, 2009

//Notes: This control basicly works.  One feature that does not currently
//work is the update geocodes button on the edit control options page.
require_once('control.php');


class GeolocatorControl extends Control {
	protected $name = "Geolocator Control";
	protected $type = "Geolocator";
	protected $value;
	protected $ExistingData;
	
	public function GeolocatorControl($projectid='', $controlid='', $recordid='', $presetid='', $inPublicTable = false){
		if (empty($projectid) || empty($controlid)) return;
        
		global $db;
		$this->pid = $projectid;
        $this->cid = $controlid;
        $this->rid = $recordid;
        $this->cName = 'p'.$projectid.'c'.$controlid;
        $this->ExistingData = false;
       
        
        $controlCheck = $db->query('SELECT schemeid, name, description, required, options FROM p'.$projectid.'Control WHERE cid='.escape($controlid).' LIMIT 1');
        if ($controlCheck->num_rows > 0) {
            $controlCheck = $controlCheck->fetch_assoc();
            $this->sid = $controlCheck['schemeid'];
            foreach(array('name', 'description', 'required', 'options') as $field) {
                $this->$field = $controlCheck[$field];
            }
            
            $this->options = simplexml_load_string($this->options);
        } else $this->pid = $this->cid = $this->rid = $this->cName = '';
        
		if(!empty($recordid)){
        	$valueCheck = $db->query('SELECT value FROM p'.$projectid.'Data WHERE id='.escape($recordid).' AND cid='.escape($controlid).' LIMIT 1');
        	if ($valueCheck->num_rows > 0)
        	{
        	    $this->ExistingData = true;
        	    $valueCheck = $valueCheck->fetch_assoc();
        	    $this->value = simplexml_load_string($valueCheck['value']);
        	}
		}
        
    }
    
    //Delete all data generated by an instance of this control.
    public function delete(){
		global $db;
		
		if(!$this->isOK()) return;
		
		if(!empty($this->rid)){
			$deleteCall = $db->query('DELETE FROM p'.escape($this->pid,false).'Data WHERE id='.escape($this->rid).' AND cid='.escape($this->cid).' LIMIT 1');
		}
		else{
			$deleteCall = $db->query('DELETE FROM p'.escape($this->pid,false).'Data WHERE cid='.escape($this->cid));
			$publicDeleteCall = $db->query('DELETE FROM p'.escape($this->pid,false).'PublicData WHERE cid='.escape($this->cid));
		}
    }
    
    //Display the names of the controls that the geolocator will pull from
	public function display() {
		global $db;
		
		$query = "SELECT options FROM p".$this->pid."Control WHERE cid=".escape($this->cid)." AND schemeid=".escape($this->sid)." LIMIT 1";
		$query = $db->query($query);
		if(!is_object($query) || $query->num_rows != 1){
			echo gettext('Geolocator uninitialized; Please edit control options.');
			return;
		}
		
		$query = $query->fetch_assoc();
		$xml = simplexml_load_string($query['options']);
		
		$out = "";
		foreach($xml->option as $control){
			$out .= $control.", ";
		}
		
		if(!empty($out)){
			//Remove the trailing comma and space
			echo substr($out, 0, strlen($out) - 2).'<br/>';
		}
		else{
			echo gettext('No location controls set.  Edit control properties to add location controls.').'<br/>';
		}
		
    }
    
    public function displayXML(){
    }
    
    public function displayOptionsDialog(){
		$controlPageURL = baseURI . 'controls/geolocatorControl.php';
?><!-- Javascript functions to execute control edit functions -->
<script type='text/javascript' src='http://maps.google.com/maps/api/js?sensor=true'></script>
<script type="text/javascript">
//<![CDATA[
    function removeOption() {
        var value = $('#selectedControls').val();
        if(typeof(value) != 'undefined')
        {
        	$.post('<?php echo $controlPageURL?>', {action:'removeOption',source:'GeolocatorControl',cid:'<?php echo $this->cid?>',sid:'<?php echo $this->sid?>',option:value }, function(resp){$("#ajax").html(resp);}, 'html');
        }
    }
    function addOption() {
        var value = $('#controlList').val();
        if(typeof(value) != 'undefined')
        {
        	$.post('<?php echo $controlPageURL?>', {action:'addOption',source:'GeolocatorControl',cid:'<?php echo $this->cid?>',sid:'<?php echo $this->sid?>',label:value }, function(resp){$("#ajax").html(resp);}, 'html');
        }
    }
    function moveOption(vardirection) {
        var value = $('#selectedControls').val();
        if(typeof(value) != 'undefined')
        {
        	$.post('<?php echo $controlPageURL?>', {action:'moveOption',source:'GeolocatorControl',cid:'<?php echo $this->cid?>',sid:'<?php echo $this->sid?>',option:value,direction:vardirection}, function(resp){$("#ajax").html(resp);}, 'html');
        }
    }
    function updateGeocodes(){
        var answer = confirm("<?php echo gettext('Are you sure you want to update geocodes?  This may take some time, and all existing geocodes will be replaced')?>");
        if(answer){
        	$.post('<?php echo $controlPageURL?>', {action:'Update',source:'GeolocatorControl',cid:'<?php echo $this->cid?>',sid:'<?php echo $this->sid?>' }, function(o){
				//alert(o.responseText);
				var geocodes = o.responseText.split("<\/script>");
				for(var i = 0; i < geocodes.length; i++){
    				geocodes[i] = geocodes[i].substr(geocodes[i].indexOf('>')+1);
    				eval(geocodes[i]);
				}
				//alert(geocodes);
				eval(o.responseText);
				}, 'html');
            
        	$.post('<?php echo $controlPageURL?>',{
					action:'Update',
					source:'GeolocatorControl',
					cid:'<?php echo $this->cid?>',
					sid:'<?php echo $this->sid?>'
				},
    			function(responseText){
        				var geocodes = responseText.split("<\/script>");
        				for(var i = 0; i < geocodes.length; i++){
            				geocodes[i] = geocodes[i].substr(geocodes[i].indexOf('>')+1);
            				eval(geocodes[i]);
        				}
        				//alert(geocodes);
//        				eval(responseText);
        			});

        	$.post('<?php echo $controlPageURL?>', {action:'showDialog',source:'GeolocatorControl',cid:'<?php echo $this->cid?>',sid:'<?php echo $this->sid?>' }, function(resp){$("#ajax").html(resp);}, 'html');
        }
    }
	$.post('<?php echo $controlPageURL?>', {action:'showDialog',source:'GeolocatorControl',cid:'<?php echo $this->cid?>',sid:'<?php echo $this->sid?>' }, function(resp){$("#ajax").html(resp);}, 'html');
    
 // ]]>
</script>
<div id="ajax"></div>
<?php
    }
    
    public static function initialOptions(){
		return '<options><defaultValue /></options>';
    }
    
	public function storedValueToDisplay($xml,$pid,$cid)
	{
		$xml = simplexml_load_string($xml);
		
		$retString = "";
		if ($xml->lat){
			$retString .= "<strong>".gettext('Latitude').": $xml->lat</strong><br />";
		}
		if ($xml->lng){
			$retString .= "<strong>".gettext('Longitude').": $xml->lng</strong><br />";
		}
		if($xml->address){
			$retString .= "<strong>".gettext('Translated Address').": $xml->address</strong><br />";
		}
		return $retString;
	}
	
	public function storedValueToSearchResult($xml)
	{
		$xml = simplexml_load_string($xml);
    	
    	$returnVal = array();
    	$returnVal['lat'] = (string) $xml->lat;
    	$returnVal['lng'] = (string) $xml->lng;
    	$returnVal['address'] = (string) $xml->address;
    	
        return $returnVal;
	}
	
	public function showData()
    {
    	if (!empty($this->rid) && is_object($this->value))
        {
        	$returnString = '';
    	    $returnString .= gettext('Latitude').': '.$this->value->lat.'<br />';
    	    $returnString .= gettext('Longitude').': '.$this->value->lng.'<br />';
    	    $returnString .= gettext('Geocoded Address').': '.$this->value->address;
    	    return $returnString;
    	}
    }
    
    public function isXMLPacked(){
    	return true;
    }
    
    //Since this control does not take input directly on ingest, this will always be true?
    public function isEmpty(){
    	return true;
    }
    
	public function getName() {
		return $this->name;
	}
	
	public function getSearchString($submitData) { return false; }
	
	public function getType() {
		return $this->type;
	}

	public function setXMLInputValue($value) {
		unset($this->XMLInputValue);
	}
	
	//When a record is ingested, combine the data from all of the location fields
	//and geocode it.  Store the result as latitude, longitude, and address string.
	public function ingest($publicIngest = false)
	{
        global $db;
        
        if (!$this->isOK()) return;
        
        if (empty($this->rid)) {
            echo '<div class="error">'.gettext('No Record ID Specified').'.</div>';
            return;
        }
        
        
        $query = "SELECT * FROM p".$this->pid.'Control'." WHERE schemeid=".escape($this->sid);
        $query = $db->query($query);
        if(!is_object($query) || $query->num_rows < 1){
        	echo gettext("Invalid Project/Scheme ID");
        }
        
        $cid = array();
        while($row = $query->fetch_assoc()){
        	$cid[$row['name']] = $row['cid'];
        	if ($row['cid'] == $this->cid){
        		$options = $row['options'];
        	}
        }
        $options = simplexml_load_string($options);
        //Generate the cNames to get data from $_REQUEST
        //Build the geocode address string
        $address ="";
        foreach($options->option as $con){
        	$c = $cid[(string)$con];
        	$cname = "p$this->pid"."c$c";
        	if(isset($_REQUEST[$cname])){
        		$temp = $_REQUEST[$cname];
        	}else{
        		// nothing to ingest!
        		// this happens when you import data into a scheme with
        		// a geolocator control in it.
        		return;
        	}
        	if($temp != '')
        		$address .= $temp." ";
        }
        //If address string ends up being blank, don't try to geocode it
        if($address != '')
        	GeoControlOptions::geocode($address, $this->cid, $this->sid, $this->ExistingData, $this->rid);
      
	}
	
	//Validation for a geolocator has 2 parts:
	//If the control is required, make sure that at least 1 control has been
	//selected for location input and that this ingestion has data for at least 1 location input control.
	//Also, make sure that the list of location input controls is valid - ie, none of them
	//have been deleted since the last time the control options were edited.
	public function validateIngestion($publicIngest = false)
	{
		global $db;
		
		//Get the list of fields to pull from
		$query = "SELECT name, options FROM p".$this->pid."Control WHERE cid=".escape($this->cid)." LIMIT 1";
		//return $query;
		$query = $db->query($query);
		if(!is_object($query) || $query->num_rows != 1){
			if ($this->required)
				return gettext('Geolocator control uninitialized');
			else
				return '';
		}
		//If geolocator is required, then at least 1 of the location data controls must contain data
		else{
			$data = $query->fetch_assoc();
			$myName = $data['name'];
			$query = "SELECT * FROM p".$this->pid."Control WHERE schemeid=".escape($this->sid);
        	$query = $db->query($query);
        	$names = array();
        	$cid = array();
        	while($control = $query->fetch_assoc()){
        		$names[]=$control['name'];
        		$cid[]=$control['cid'];
        	}
			$xml = simplexml_load_string($data['options']);
			$locationPresent = false;
			foreach($xml->option as $control){
				//TODO: What is the right thing to do if array_search returns false? Currently returns invalid ingestion
				$conNumber = array_search($control, $names);
				if($conNumber === false){
					return gettext('Control')." '$control' ".gettext('has been deleted - please edit options for')." $myName.";
				}
				//Build the cName for the control
				$cName = "p$this->pid"."c$cid[$conNumber]";
				if(isset($_REQUEST[$cName]) && !empty($_REQUEST[$cName])){
					$locationPresent = true;
				}
			}
			if (!$this->required){
				return '';
			}
			if(!$locationPresent){
				return gettext('No location data entered for required Geolocator control').'.';
			}
			else{
				return '';
			}
		}
	}
}

class GeoControlOptions{
	
	//Display the fields and buttons that appear on the control edit page
	public static function showDialog($cid, $sid){
		
		global $db;
		$acceptedControlTypes = array(
		'ListControl',
		'TextControl');
		
		// get the XML list of modifiers
        $query = 'SELECT options FROM p'.$_SESSION['currentProject'].'Control WHERE cid='.escape($cid).' LIMIT 1';
        $query = $db->query($query);
        if (!is_object($query) || $query->num_rows != 1) {
            echo gettext('Improper Control ID or Project ID Specified').'.';
            return;
        }
        $query = $query->fetch_assoc();
        
        $xml = simplexml_load_string($query['options']);
        // Get the names of all the controls for this scheme
        $query = "SELECT * FROM p".$_SESSION['currentProject']."Control WHERE schemeid=".escape($sid);
        $query = $db->query($query);
        
        //Since this function is run from the control editting page, this control
        //is already created.  There must be at least 1 non-geolocator control to
        //get location data from, so make sure there are at least 2 controls for this scheme.
        if(!is_object($query) || ($query->num_rows < 2)){
        	echo gettext('Invalid project or scheme id, or this scheme does not have any non-geolocator controls.');
        	return;
        }
        ?>
		<form id="geoSettings">
		        
		<table class="table">
		<tr>
		    <td width="40%"><strong><?php echo gettext('Controls List')?></strong><br /><?php echo gettext('These are the available controls.  Select and add the ones the geolocator will pull address data from.')?></td>
		    <td><select name="controlList" id="controlList" size="7">
        		<?php
				$size = $query->num_rows;
				for($i = 0; $i < $size; $i++){
					$control = $query->fetch_array();
		       		if(array_search($control['type'], $acceptedControlTypes) !== False)
		        		echo '<option>'.htmlEscape($control['name']).'</option>';
				}
				?>
		        </select><br />
		        <input type="button" onclick="addOption();" value="<?php echo gettext('Add')?>" />
		    </td>
		</tr>
		<tr>
		    <td><strong><?php echo gettext('Selected Controls')?></strong><br /><?php echo gettext('The controls in this list will be used for geolocation on record ingestion').'.'?>
			<?php echo gettext('The locator string will be built by adding the contents of the controls from top to bottom').'.'?></td>
			<td><select name="selectedControls" id="selectedControls" size="7">
				<?php
		 		foreach($xml->option as $option) {
		            echo '<option>'.htmlEscape($option).'</option>'."\n";
		        }
		        ?>
		        </select><br />
		        <input type="button" onclick="moveOption('up');" value="<?php echo gettext('Up')?>" />
		        <input type="button" onclick="moveOption('down');" value="<?php echo gettext('Down')?>" />
		        <input type="button" onclick="removeOption();" value="<?php echo gettext('Remove')?>" />
		    </td>
		</tr>
		
		<tr>
			<td><strong><?php echo gettext('Update Geocodes')?></strong><br /><?php echo gettext('Look up latitude/longitude for all records in this scheme')?></td>
			<td>
			
			<input type="button" onclick="updateGeocodes()" value="<?php echo gettext('Update')?>"/></td>
		</tr>
		</table></form>
		<?php
	}
	
//Perform geocoding of a location string
	public static function geocode($location, $cid, $sid, $existing='', $rid='', $source='ingest'){
		//Do the geocode.
       	$controlPageURL = baseURI . 'controls/geolocatorControl.php';
       	if($existing)$ex = 1;
       	else $ex = 0;
       	if($source=='ingest'){
        	?><script type='text/javascript' src='http://maps.google.com/maps/api/js?sensor=true'></script><?php
       	}
     ?>
        <script type= 'text/javascript'>
        geocoder = new google.maps.Geocoder();
        addr = '<?php echo $location; ?>';
        geocoder.geocode({address: addr}, function(results, status) {
			if (status == google.maps.GeocoderStatus.OK && results.length > 0){
				if ( status != google.maps.GeocoderStatus.ZERO_RESULTS) {
					var lat = results[0].geometry.location.lat();
					var lng = results[0].geometry.location.lng();
					//alert(results[0].formatted_address);
					$("#ajax").load(<?php echo "'$controlPageURL', {geocode:true, lat:lat, lng:lng,sid:'$sid', cid:'$cid',address:results[0].formatted_address,exists:$ex,rid:'$rid' }";?>);
				}
				else{
					$("#ajax").load(<?php echo "'$controlPageURL', {geocode:true, lat:0, lng:0, sid:$sid,cid:$cid,address:'Geocode for: ' + results[0].formatted_address + 'failed.',exists:$ex,rid:'$rid' }";?>);
				}
			}
			else{
				$("#ajax").load(<?php echo "'$controlPageURL', {geocode:true, lat:0, lng:0, sid:$sid,cid:$cid,address:'Geocode for: ' + addr + 'failed.',exists:$ex,rid:'$rid' }";?>);
			}
        });
        </script>
        <?php
        
	}
	
	//Take the currently selected control from the list of controls and add it to
	//the list of location controls
	// cid: The ID of the control (in the currently selected scheme and project)
    // control: The name of the control to add to the list
    public static function add($cid, $control)
	{
		// Remove starting/end whitespace since it causes headaches with how
		// HTML/Javascript parse the whitespace
		$control = trim($control);
		if (empty($control)) return;
		
		$xml = getControlOptions($cid);
		if(!$xml) return;
		
		// check to make sure this wouldn't be a duplicate control
		$duplicate = false;
		foreach($xml->option as $xmlOption) {
			if ($control == $xmlOption) $duplicate = true;
		}
		if (!$duplicate)
		{
    		// add the control
    		$xml->addChild('option', xmlEscape($control));
		
    		setControlOptions($cid, $xml);
		
		} else echo '<div class="error">'.gettext('You cannot include the same control more than once').'</div>';
	}
	
	// Move a list option up or down in the display (and thus in the XML representation)
	// cid: The ID of the control (in the currently selected scheme and project)
	// option: The text for the option to be moved
	// direction: 'up' or 'down'
	public static function move($cid, $option, $direction)
	{
	    if ($direction != 'up' && $direction != 'down') {
            echo gettext('Improper Direction Specified').'.';
            return;
        }
        $xml = getControlOptions($cid);
		if(!$xml) return;

        // iterate through the list copying all non-list option options
        // move all the options to a PHP array which can be manipulated
        // then re-copy them to the end
        $newXML     = simplexml_load_string('<options></options>');
        $newOptions = array();
	    foreach($xml->children() as $childType => $childValue)
        {
            if ($childType != 'option') $newXML->addChild($childType, xmlEscape($childValue));
            else $newOptions[] = $childValue;
        }
		
		// If the option is not found in the array, don't bother going through
		// the replacement loop and updating the database
        $key = array_search($option, $newOptions, false);
        if ($key !== false)
        {
        	if ($direction == 'up')
        	{
        		// unless the key is already at the top, swap it with the one above
        		if ($key > 0) {
        			$temp = $newOptions[$key - 1];
        			$newOptions[$key - 1] = $newOptions[$key];
        			$newOptions[$key] = $temp;
        		}
        	} else if ($direction == 'down')
        	{
        		// unless the key is already at the bottom, swap it with the one below
        		if ($key < (sizeof($newOptions) - 1))
        		{
                    $temp = $newOptions[$key + 1];
                    $newOptions[$key + 1] = $newOptions[$key];
                    $newOptions[$key] = $temp;
        		}
        	}
        	
        	// iterate through and add the options to the new XML
        	foreach($newOptions as $op) $newXML->addChild('option', xmlEscape($op));
        	
        	// update the database
	        setControlOptions($cid, $xml);
        }
	}
	
	// Remove a control from the list of selected controls
	// cid: The ID of the control (in the currently selected scheme and project)
	// option: The name of the control to remove
	public static function remove($cid, $option)
	{
		$xml = getControlOptions($cid);
		if(!$xml) return;

		$n = 0;
		foreach($xml->option as $preset){
			if($option == $preset){
				unset($xml->option[$n]);
				break;
			}
			$n++;
		}
	    
	    // update the XML in the database
        setControlOptions($cid, $xml);
    }
    
    //Execute a geocode request for each record in a scheme and store the result
    //Currently this doesn't work.  The geocode function gets called, but the javascript
    //is not executed.
    public static function updateGeocodes($cid, $sid){
    	global $db;
    	//Because of the way this is called, the header needs to be re-displayed
    	
    	//Get the contents of the control table to associate names with cids and
    	//get the list of controls to use for input
    	$query = "SELECT name, cid, options FROM p".$_SESSION['currentProject']."Control WHERE schemeid=".escape($sid);
    	$controls = $db->query($query);
    	$names = array();
    	while($con = $controls->fetch_array()){
    		$names[$con['name']] = $con['cid'];
    		if ($con['cid'] == $cid){
    			$options = $con['options'];
    		}
    	}
    	
    	//Get a list of cids for the controls to use in geocoding
    	$xml = simplexml_load_string($options);
    	$usedControls = array();
    	foreach($xml->option as $option){
    		$usedControls[] = $names[(string)$option];
    	}
    	
    	$query = "SELECT id, cid, value FROM p".$_SESSION['currentProject']."Data WHERE schemeid=".escape($sid)." ORDER BY id ASC";
    	$query = $db->query($query);
    	$values = array();
    	$data = $query->fetch_assoc();
    	$kid = $data['id'];
    	$exists = false;
    	//Build the string to send to Google's geocoder
    	while($data){
    		if($data['id'] != $kid){
    			$address = '';
    			//This loop makes sure the address is built in the intended order
    			foreach($usedControls as $con){
    				if(isset($values[$con])){
    					$address .= $values[$con]." ";
    				}
    			}
    			if($address != ''){
    				GeoControlOptions::geocode($address, $cid, $sid,$exists,$kid,'update');
    			}
    			$kid = $data['id'];
    			$exists = false;
    			unset($values);
    			$values = array();
    		}
    		$values[$data['cid']]=$data['value'];
    		if ($data['cid'] == $cid && !empty($data['value'])){
    			$exists = true;
    		}
    		$data = $query->fetch_assoc();
    	}
    	//Catch the last record
    	if(!empty($values)){
    		$address = '';
    		//This loop makes sure the address is built in the intended order
    		foreach($usedControls as $con){
    			if(isset($values[$con])){
    				$address .= $values[$con]." ";
    			}
    		}
    		if($address != ''){
    			GeoControlOptions::geocode($address, $cid, $sid,$exists,$kid,'update');
    		}
    	}
    }
}

//Handle the ajax request to store a geocode result
if(isset($_POST['geocode']) && isset($_POST['cid']))
{
	global $db;
	$xml = "<location></location>";
	$xml = simplexml_load_string($xml);
	$xml->addChild('lat', xmlEscape($_POST['lat']));
	$xml->addChild('lng', xmlEscape($_POST['lng']));
	$xml->addChild('address', xmlEscape($_POST['address']));
	if($_POST['exists'])
		$query = "UPDATE p".$_SESSION['currentProject']."Data SET value=".escape($xml->asXML())." WHERE id=".escape($_POST['rid'])." AND cid=".escape($_POST['cid']);
	else
		$query = "INSERT INTO p".$_SESSION['currentProject']."Data (id, cid, schemeid, value) VALUES (".escape($_POST['rid']).", ".escape($_POST['cid']).", ".escape($_POST['sid']).", ".escape($xml->asXML()).")";
	$query = $db->query($query);
}

//Handle AJAX requests here
if(isset($_POST['action']) && isset($_POST['source']) && $_POST['source'] == 'GeolocatorControl')
{
	requirePermissions(EDIT_LAYOUT, isset($_SESSION['currentScheme']) ? 'schemeLayout.php?schemeid='.$_SESSION['currentScheme'] : 'selectScheme.php');
	$action = $_POST['action'];
    if($action == 'addOption') {
    	GeoControlOptions::add($_POST['cid'], $_POST['label']);
    	GeoControlOptions::showDialog($_POST['cid'], $_POST['sid']);
    } else if ($action == 'removeOption') {
    	GeoControlOptions::remove($_POST['cid'], $_POST['option']);
    	GeoControlOptions::showDialog($_POST['cid'], $_POST['sid']);
    } else if ($action == 'moveOption') {
    	GeoControlOptions::move($_POST['cid'], $_POST['option'], $_POST['direction']);
    	GeoControlOptions::showDialog($_POST['cid'], $_POST['sid']);
    } else if ($action == 'usePreset') {
        GeoControlOptions::usePreset($_POST['cid'], $_POST['preset']);
        GeoControlOptions::showDialog($_POST['cid'], $_POST['sid']);
    } else if ($action == 'savePreset') {
        GeoControlOptions::savePreset($_POST['cid'], $_POST['pid'], $_POST['name']);
        GeoControlOptions::showDialog($_POST['cid'], $_POST['sid']);
    } else if ($action == 'updateDefaultValue') {
        GeoControlOptions::updateDefaultValue($_POST['cid'], $_POST['defaultV']);
        GeoControlOptions::showDialog($_POST['cid'], $_POST['sid']);
    } else if ($action == 'showDialog') {
    	GeoControlOptions::showDialog($_POST['cid'], $_POST['sid']);
    } else if($action == 'Update'){
    	GeoControlOptions::updateGeocodes($_POST['cid'], $_POST['sid']);
    	GeoControlOptions::showDialog($_POST['cid'], $_POST['sid']);
    }
    
}
?>
