<?php
/**
Copyright (2009) Matrix: Michigan State University

This file is part of KORA.

KORA is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

KORA is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>. */

// Initial Version: Ben Pedersen, 2009

//Notes: This control basicly works.  One feature that does not currently
//work is the update geocodes button on the edit control options page.
require_once(__DIR__.'/../includes/includes.php');
// ADD JAVASCRIPT(S) FOR THIS CLASS IN THE GLOBAL CONTEXT LIKE SO..
Manager::AddJS('controls/geolocatorControl.js', Manager::JS_CLASS); 


class GeolocatorControl extends Control {
	protected $name = "Geolocator Control";
	protected $type = "Geolocator";
	
	public function GeolocatorControl($projectid='', $controlid='', $recordid='', $inPublicTable = false){
		if (empty($projectid) || empty($controlid)) return;
		
		global $db;
		
		$this->Construct($projectid,$controlid,$recordid,$inPublicTable);
		
		// THESE OPTIONS ARE NOT VALID FOR THIS CLASS
		$this->isRequiredValid = false;
		$this->isAdvSearchableValid = false;
		$this->isShowInPublicResultsValid = false;
		$this->isSortValid = false;
		
		// If data exists for this control, get it
		if (!empty($this->rid))
		{
			$this->LoadValue();
		}
	}
	
	//Delete all data generated by an instance of this control.
	public function delete(){
		global $db;
		
		if(!$this->isOK()) return;
		
		if(!empty($this->rid)){
			$deleteCall = $db->query('DELETE FROM p'.escape($this->pid,false).'Data WHERE id='.escape($this->rid).' AND cid='.escape($this->cid).' LIMIT 1');
		}
		else{
			$deleteCall = $db->query('DELETE FROM p'.escape($this->pid,false).'Data WHERE cid='.escape($this->cid));
			$publicDeleteCall = $db->query('DELETE FROM p'.escape($this->pid,false).'PublicData WHERE cid='.escape($this->cid));
		}
	}
	
	//Display the names of the controls that the geolocator will pull from
	public function display() {
		global $db;
		
		if (!$this->StartDisplay()) { return false; }
		
		$query = "SELECT options FROM p".$this->pid."Control WHERE cid=".escape($this->cid)." AND schemeid=".escape($this->sid)." LIMIT 1";
		$query = $db->query($query);
		if(!is_object($query) || $query->num_rows != 1){
			echo gettext('Geolocator uninitialized; Please edit control options.');
			return;
		}
		
		$query = $query->fetch_assoc();
		$xml = simplexml_load_string($query['options']);
		
		$out = "";
		foreach($xml->option as $control){
			$out .= $control.", ";
		}
		
		if(!empty($out)){
			//Remove the trailing comma and space
			echo substr($out, 0, strlen($out) - 2).'<br/>';
		}
		else{
			echo gettext('No location controls set.  Edit control properties to add location controls.').'<br/>';
		}
		
		$this->EndDisplay();
	}
	
	public function displayXML(){
	}
	
	public static function initialOptions(){
		return '<options><defaultValue /></options>';
	}
	
	public function storedValueToDisplay($xml,$pid,$cid)
	{
		$xml = simplexml_load_string($xml);
		
		$retString = "";
		if ($xml->lat){
			$retString .= "<strong>".gettext('Latitude').": $xml->lat</strong><br />";
		}
		if ($xml->lng){
			$retString .= "<strong>".gettext('Longitude').": $xml->lng</strong><br />";
		}
		if($xml->address){
			$retString .= "<strong>".gettext('Translated Address').": $xml->address</strong><br />";
		}
		return $retString;
	}
	
	public function storedValueToSearchResult($xml)
	{
		$xml = simplexml_load_string($xml);
		
		$returnVal = array();
		$returnVal['lat'] = (string) $xml->lat;
		$returnVal['lng'] = (string) $xml->lng;
		$returnVal['address'] = (string) $xml->address;
		
		return $returnVal;
	}
	
	public function showData()
	{
		if (!empty($this->rid) && is_object($this->value))
		{
			$returnString = '';
			$returnString .= gettext('Latitude').': '.$this->value->lat.'<br />';
			$returnString .= gettext('Longitude').': '.$this->value->lng.'<br />';
			$returnString .= gettext('Geocoded Address').': '.$this->value->address;
			return $returnString;
		}
	}
	
	public function isXMLPacked(){
		return true;
	}
	
	//Since this control does not take input directly on ingest, this will always be true?
	public function isEmpty(){
		return true;
	}
	
	public function getSearchString($submitData) { return false; }
	
	public function getType() {
		return $this->type;
	}
	
	public function setXMLInputValue($value) {
		unset($this->XMLInputValue);
	}
	
	//When a record is ingested, combine the data from all of the location fields
	//and geocode it.  Store the result as latitude, longitude, and address string.
	public function ingest($publicIngest = false)
	{
		global $db;
		
		if (!$this->isOK()) return;
		
		if (empty($this->rid)) {
			echo '<div class="error">'.gettext('No Record ID Specified').'.</div>';
			return;
		}
		
		
		$query = "SELECT * FROM p".$this->pid.'Control'." WHERE schemeid=".escape($this->sid);
		$query = $db->query($query);
		if(!is_object($query) || $query->num_rows < 1){
			echo gettext("Invalid Project/Scheme ID");
		}
		
		$cid = array();
		while($row = $query->fetch_assoc()){
			$cid[$row['name']] = $row['cid'];
			if ($row['cid'] == $this->cid){
				$options = $row['options'];
			}
		}
		$options = simplexml_load_string($options);
		//Generate the cNames to get data from $_REQUEST
		//Build the geocode address string
		$address ="";
		foreach($options->option as $con){
			$c = $cid[(string)$con];
			$cname = "p$this->pid"."c$c";
			if(isset($_REQUEST[$cname])){
				$temp = $_REQUEST[$cname];
			}else{
				// nothing to ingest!
				// this happens when you import data into a scheme with
				// a geolocator control in it.
				return;
			}
			if($temp != '')
				$address .= $temp." ";
		}
		//If address string ends up being blank, don't try to geocode it
		if($address != '')
			$this->geocode($address, $this->cid, $this->sid, $this->existingData, $this->rid);
		
	}
	
	//Validation for a geolocator has 2 parts:
	//If the control is required, make sure that at least 1 control has been
	//selected for location input and that this ingestion has data for at least 1 location input control.
	//Also, make sure that the list of location input controls is valid - ie, none of them
	//have been deleted since the last time the control options were edited.
	public function validateIngestion($publicIngest = false)
	{
		global $db;
		
		//Get the list of fields to pull from
		$query = "SELECT name, options FROM p".$this->pid."Control WHERE cid=".escape($this->cid)." LIMIT 1";
		//return $query;
		$query = $db->query($query);
		if(!is_object($query) || $query->num_rows != 1){
			if ($this->required)
				return gettext('Geolocator control uninitialized');
			else
			return '';
		}
		//If geolocator is required, then at least 1 of the location data controls must contain data
		else{
			$data = $query->fetch_assoc();
			$myName = $data['name'];
			$query = "SELECT * FROM p".$this->pid."Control WHERE schemeid=".escape($this->sid);
			$query = $db->query($query);
			$names = array();
			$cid = array();
			while($control = $query->fetch_assoc()){
				$names[]=$control['name'];
				$cid[]=$control['cid'];
			}
			$xml = simplexml_load_string($data['options']);
			$locationPresent = false;
			foreach($xml->option as $control){
				//TODO: What is the right thing to do if array_search returns false? Currently returns invalid ingestion
				$conNumber = array_search($control, $names);
				if($conNumber === false){
					return gettext('Control')." '$control' ".gettext('has been deleted - please edit options for')." $myName.";
				}
				//Build the cName for the control
				$cName = "p$this->pid"."c$cid[$conNumber]";
				if(isset($_REQUEST[$cName]) && !empty($_REQUEST[$cName])){
					$locationPresent = true;
				}
			}
			if (!$this->required){
				return '';
			}
			if(!$locationPresent){
				return gettext('No location data entered for required Geolocator control').'.';
			}
			else{
				return '';
			}
		}
	}
	
	// OVERRIDE
	public function ExportToSimpleXML(&$simplexml) 
	{
		// NOTHING TO DO FOR THIS EXPORT
		return $simplexml;					
	}
	
	public function PrintControlOptions()
	{
		Control::PrintControlOptions();
		$this->showDialog();
	}
	
	public function showDialog()
	{
		print "<div class='kora_control kora_control_opts' pid='{$this->pid}' cid='{$this->cid}'>";
		$this->OptPrintControlList();
		$this->OptPrintSelectedControls();
		$this->OptPrintUpdateGeo();
		print "</div>";
	}
	
	protected function OptPrintControlList(){
		$xml = $this->GetControlOptions();
		if(!$xml) return;
		
		global $db;
		$acceptedControlTypes = array(
			'ListControl',
			'TextControl');
		
		// get the XML list of modifiers
		$query = 'SELECT options FROM p'.$this->pid.'Control WHERE cid='.escape($this->cid).' LIMIT 1';
		$query = $db->query($query);
		if (!is_object($query) || $query->num_rows != 1) {
			echo gettext('Improper Control ID or Project ID Specified').'.';
			return;
		}
		$query = $query->fetch_assoc();
		
		// Get the names of all the controls for this scheme
		$query = "SELECT * FROM p".$this->pid."Control WHERE schemeid=".escape($this->sid);
		$query = $db->query($query);
		
		//Since this function is run from the control editting page, this control
		//is already created.  There must be at least 1 non-geolocator control to
		//get location data from, so make sure there are at least 2 controls for this scheme.
		if(!is_object($query) || ($query->num_rows < 2)){
			echo gettext('Invalid project or scheme id, or this scheme does not have any non-geolocator controls.');
			return;
		}
		?>
		
		<table class="table kcopts_style">
		<tr>
		<td width="60%" class="kcopt_label"><strong><?php echo gettext('Controls List')?></strong><br /><?php echo gettext('These are the available controls.  Select and add the ones the geolocator will pull address data from.')?></td>
		<td><select name="controlList" class="kcgcopts_contList" size="7">
		<?php
		$size = $query->num_rows;
		for($i = 0; $i < $size; $i++){
			$control = $query->fetch_array();
			if(array_search($control['type'], $acceptedControlTypes) !== False)
				echo '<option>'.htmlEscape($control['name']).'</option>';
		}
		?>
		</select><br />
		<input type="button" class="kcgcopts_clBtnAdd" value="<?php echo gettext('Add')?>" />
		</td>
		</tr>
		</table>
		
		<?php
	}
	
	protected function OptPrintSelectedControls(){
		$xml = $this->GetControlOptions();
		if(!$xml) return;
		?>
		
		<table class="table kcopts_style">
		<tr>
		<td width="60%" class="kcopt_label"><strong><?php echo gettext('Selected Controls')?></strong><br /><?php echo gettext('The controls in this list will be used for geolocation on record ingestion').'.'?>
		<?php echo gettext('The locator string will be built by adding the contents of the controls from top to bottom').'.'?></td>
		<td><select name="selectedControls" class="kcgcopts_selCont" size="7">
		<?php
		foreach($xml->option as $option) {
			echo '<option>'.htmlEscape($option).'</option>'."\n";
		}
		?>
		</select><br />
		<input type="button" class="kcgcopts_scBtnUp" value="<?php echo gettext('Up')?>" />
		<input type="button" class="kcgcopts_scBtnDown" value="<?php echo gettext('Down')?>" />
		<input type="button" class="kcgcopts_scBtnRemove" value="<?php echo gettext('Remove')?>" />
		</td>
		</tr>
		</table>
		
		<?php
	}
	
	protected function OptPrintUpdateGeo(){
		$xml = $this->GetControlOptions();
		if(!$xml) return;
		?>
		
		<table class="table kcopts_style">
		<tr>
		<td width="60%" class="kcopt_label"><strong><?php echo gettext('Update Geocodes')?></strong><br /><?php echo gettext('Look up latitude/longitude for all records in this scheme')?></td>
		<td>
		
		<input type="button" class="kcgcopts_ugBtnUpdate" value="<?php echo gettext('Update')?>"/></td>
		</tr>
		</table>
		
		<?php
	}
	
	public function updateControls($options){
		foreach ($options as &$val)
			{ $val = xmlEscape($val); }
		
		$this->SetExtendedOption('option', array_unique($options) );
	}
	
	public function updateGeocodes(){
		global $db;
		//Get the contents of the control table to associate names with cids and
		//get the list of controls to use for input
		$query = "SELECT name, cid, options FROM p".$this->pid."Control WHERE schemeid=".escape($this->sid);
		$controls = $db->query($query);
		$names = array();
		while($con = $controls->fetch_array()){
			$names[$con['name']] = $con['cid'];
			if ($con['cid'] == $this->cid){
				$options = $con['options'];
			}
		}
		
		//Get a list of cids for the controls to use in geocoding
		$xml = simplexml_load_string($options);
		$usedControls = array();
		foreach($xml->option as $option){
			$usedControls[] = $names[(string)$option];
		}
		
		$query = "SELECT id, cid, value FROM p".$this->pid."Data WHERE schemeid=".escape($this->sid)." ORDER BY id ASC";
		$query = $db->query($query);
		$values = array();
		$data = $query->fetch_assoc();
		$kid = $data['id'];
		$exists = false;
		//Build the string to send to Google's geocoder
		while($data){
			if($data['id'] != $kid){
				$address = '';
				//This loop makes sure the address is built in the intended order
				foreach($usedControls as $con){
					if(isset($values[$con])){
						$address .= $values[$con]." ";
					}
				}
				if($address != ''){
					$this->geocode($address, $this->cid, $this->sid,$exists,$kid,'update');
				}
				$kid = $data['id'];
				$exists = false;
				unset($values);
				$values = array();
			}
			$values[$data['cid']]=$data['value'];
			if ($data['cid'] == $this->cid && !empty($data['value'])){
				$exists = true;
			}
			$data = $query->fetch_assoc();
		}
		//Catch the last record
		if(!empty($values)){
			$address = '';
			//This loop makes sure the address is built in the intended order
			foreach($usedControls as $con){
				if(isset($values[$con])){
					$address .= $values[$con]." ";
				}
			}
			if($address != ''){
				$this->geocode($address, $this->cid, $this->sid,$exists,$kid,'update');
			}
		}
	}
	
	//Perform geocoding of a location string
	public function geocode($location, $sid, $existing='', $rid='', $source='ingest'){
		//Do the geocode.
		$controlPageURL = baseURI . 'controls/geolocatorControl.php';
		if($existing)$ex = 1;
		else $ex = 0;
		if($source=='ingest'){
			?><script type='text/javascript' src='http://maps.google.com/maps/api/js?sensor=true'></script><?php
		}
		?>
		<script type= 'text/javascript'>
		geocoder = new google.maps.Geocoder();
		addr = '<?php echo $location; ?>';
		geocoder.geocode({address: addr}, function(results, status) {
				if (status == google.maps.GeocoderStatus.OK && results.length > 0){
					if ( status != google.maps.GeocoderStatus.ZERO_RESULTS) {
						var lat = results[0].geometry.location.lat();
						var lng = results[0].geometry.location.lng();
						var forAdd = results[0].formatted_address;
						//alert(results[0].formatted_address);
						$("#ajax").load(<?php echo $controlPageURL.', {geocode:true, lat:lat, lng:lng, sid:'.$this->sid.', cid:'.$this->cid.',address:forAdd, exists:'.$ex.', rid:'.$rid.' }';?>);
					}
					else{
						$("#ajax").load(<?php echo $controlPageURL.', {geocode:true, lat:0, lng:0, sid:'.$this->sid.', cid:'.$this->cid.', address: Geocode for ["+forAdd+"] failed., exists:'.$ex.', rid:'.$rid.' }';?>);
					}
				}
				else{
					$("#ajax").load(<?php echo $controlPageURL.', {geocode:true, lat:0, lng:0, sid:'.$this->sid.', cid:'.$this->cid.', address: Geocode for: ["+addr+"] failed., exists:'.$ex.', rid:'.$rid.' }';?>);
				}
		});
		</script>
		<?php
		
	}
}

?>
